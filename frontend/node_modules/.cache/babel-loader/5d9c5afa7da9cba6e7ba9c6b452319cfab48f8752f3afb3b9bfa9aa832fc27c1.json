{"ast":null,"code":"// import React from \"react\";\n// import { Navigate, Outlet } from \"react-router-dom\";\n\n// const ProtectedRoute = ({\n//   isAuthenticated,\n//   children,\n//   adminRoute,\n//   isAdmin,\n//   redirect = \"/login\",\n//   redirectAdmin = \"/profile\",\n// }) => {\n//   if (!isAuthenticated) {\n//     return <Navigate to={redirect} />;\n//   }\n\n//   if (adminRoute && !isAdmin) {\n//     return <Navigate to={redirectAdmin} />;\n//   }\n\n//   return children ? children : <Outlet />;\n// };\n\n// export default ProtectedRoute;\n// <Fragment>\n//   {loading === false && (\n//     <Route\n//       {...rest}\n//       render={(props) => {\n//         if (isAuthenticated === false) {\n//           return <Navigate to=\"/login\" />;\n//         }\n\n//         if (isAdmin === true && user.role !== \"admin\") {\n//           return <Navigate to=\"/login\" />;\n//         }\n\n//         return <Component {...props} />;\n//       }}\n//     />\n//   )}\n// </Fragment>\n//     import React, { Fragment } from \"react\";\n// import { useSelector } from \"react-redux\";\n// import { Redirect, Route } from \"react-router-dom\";\n// import { Navigate } from \"react-router-dom\";\n\n// const ProtectedRoute = ({ isAdmin, component: Component, ...rest }) => {\n//   const { loading, isAuthenticated, user } = useSelector((state) => state.user);\n\n//   return (\n//     <Fragment>\n//       {loading === false && (\n//         <Route\n//           {...rest}\n//           render={(props) => {\n//             if (isAuthenticated === false) {\n//               return <Navigate to=\"/login\" />;\n//             }\n\n//             if (isAdmin === true && user.role !== \"admin\") {\n//               return <Navigate to=\"/login\" />;\n//             }\n\n//             return <Component {...props} />;\n//           }}\n//         />\n//       )}\n//     </Fragment>\n//   );\n// };\n\n// export default ProtectedRoute;\n\n//     import React from \"react\";\n// import { Navigate, Outlet } from \"react-router-dom\";\n// import { useSelector } from \"react-redux\";\n\n// const ProtectedRoute = ({\n\n//   children,\n\n//   isAdmin,\n\n// }) => {\n//   const {  isAuthenticated, user } = useSelector((state) => state.user);\n//   // const redirectAdmin = \"/profile\"\n//   if (!isAuthenticated) {\n//     return <Navigate to=\"/login\"/>;\n//   }\n\n//   if (user.role!==\"admin\" && isAdmin) {\n//     return <Navigate to=\"/account\"/>;\n//   }\n\n//   return children ? children : <Outlet />;\n// };\n\n// export default ProtectedRoute;","map":{"version":3,"names":[],"sources":["C:/Users/shrim/OneDrive/Desktop/MERN PROJECT/frontend/src/component/Route/ProtectedRoute.js"],"sourcesContent":["// import React from \"react\";\r\n// import { Navigate, Outlet } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({\r\n//   isAuthenticated,\r\n//   children,\r\n//   adminRoute,\r\n//   isAdmin,\r\n//   redirect = \"/login\",\r\n//   redirectAdmin = \"/profile\",\r\n// }) => {\r\n//   if (!isAuthenticated) {\r\n//     return <Navigate to={redirect} />;\r\n//   }\r\n\r\n//   if (adminRoute && !isAdmin) {\r\n//     return <Navigate to={redirectAdmin} />;\r\n//   }\r\n\r\n//   return children ? children : <Outlet />;\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n    // <Fragment>\r\n    //   {loading === false && (\r\n    //     <Route\r\n    //       {...rest}\r\n    //       render={(props) => {\r\n    //         if (isAuthenticated === false) {\r\n    //           return <Navigate to=\"/login\" />;\r\n    //         }\r\n\r\n    //         if (isAdmin === true && user.role !== \"admin\") {\r\n    //           return <Navigate to=\"/login\" />;\r\n    //         }\r\n\r\n    //         return <Component {...props} />;\r\n    //       }}\r\n    //     />\r\n    //   )}\r\n    // </Fragment>\r\n//     import React, { Fragment } from \"react\";\r\n// import { useSelector } from \"react-redux\";\r\n// import { Redirect, Route } from \"react-router-dom\";\r\n// import { Navigate } from \"react-router-dom\";\r\n\r\n// const ProtectedRoute = ({ isAdmin, component: Component, ...rest }) => {\r\n//   const { loading, isAuthenticated, user } = useSelector((state) => state.user);\r\n\r\n//   return (\r\n//     <Fragment>\r\n//       {loading === false && (\r\n//         <Route\r\n//           {...rest}\r\n//           render={(props) => {\r\n//             if (isAuthenticated === false) {\r\n//               return <Navigate to=\"/login\" />;\r\n//             }\r\n\r\n//             if (isAdmin === true && user.role !== \"admin\") {\r\n//               return <Navigate to=\"/login\" />;\r\n//             }\r\n\r\n//             return <Component {...props} />;\r\n//           }}\r\n//         />\r\n//       )}\r\n//     </Fragment>\r\n//   );\r\n// };\r\n\r\n// export default ProtectedRoute;\r\n\r\n  //     import React from \"react\";\r\n  // import { Navigate, Outlet } from \"react-router-dom\";\r\n  // import { useSelector } from \"react-redux\";\r\n\r\n  // const ProtectedRoute = ({\r\n    \r\n  //   children,\r\n\r\n  //   isAdmin,\r\n\r\n  // }) => {\r\n  //   const {  isAuthenticated, user } = useSelector((state) => state.user);\r\n  //   // const redirectAdmin = \"/profile\"\r\n  //   if (!isAuthenticated) {\r\n  //     return <Navigate to=\"/login\"/>;\r\n  //   }\r\n\r\n  //   if (user.role!==\"admin\" && isAdmin) {\r\n  //     return <Navigate to=\"/account\"/>;\r\n  //   }\r\n\r\n  //   return children ? children : <Outlet />;\r\n  // };\r\n\r\n  // export default ProtectedRoute;"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACJ;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEE;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}